---
- name: Enabling keyboard layouts
  community.general.dconf:
    key: /org/gnome/desktop/input-sources/sources
    value: "[('xkb', 'us'), ('xkb', 'it')]"

- name: Getting the internal ID of the GNOME Terminal profile
  ansible.builtin.shell: >-
    set -e -o pipefail;
    dconf list /org/gnome/terminal/legacy/profiles:/ | head -n1 |
      awk -F: '{print $2}' | awk -F/ '{print $1}'
  register: gnome_terminal_profile
  changed_when: false
  args:
    executable: /bin/bash

- name: Configuring GNOME Terminal
  community.general.dconf:
    key: "/org/gnome/terminal/legacy/profiles:/:\
      {{ gnome_terminal_profile.stdout }}/{{ item.key }}"
    value: "{{ item.value | string }}"
  loop:
    - key: visible-name
      value: "'mario'"
    - key: use-system-font
      value: "false"
    - key: font
      value: "'{{ gnome_terminal_font[ansible_os_family] }} 12'"
    - key: use-theme-colors
      value: "false"
    - key: audible-bell
      value: "false"
    - key: foreground-color
      value: "'rgb(255,255,255)'"
    - key: background-color
      value: "'rgb(0,0,0)'"
    - key: palette
      value: >-
        ['rgb(0,0,0)', 'rgb(170,0,0)', 'rgb(0,170,0)', 'rgb(170,85,0)',
        'rgb(0,0,170)', 'rgb(170,0,170)', 'rgb(0,170,170)', 'rgb(170,170,170)',
        'rgb(85,85,85)', 'rgb(255,85,85)', 'rgb(85,255,85)', 'rgb(255,255,85)',
        'rgb(85,85,255)', 'rgb(255,85,255)', 'rgb(85,255,255)',
        'rgb(255,255,255)']
    - key: bold-is-bright
      value: "true"

- name: Configuring screen lock settings
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: /org/gnome/desktop/screensaver/lock-delay
      value: uint32 0
    - key: /org/gnome/desktop/session/idle-delay
      value: uint32 600
    - key: /org/gnome/desktop/notifications/show-in-lock-screen
      value: "false"

- name: Disabling natural scrolling
  community.general.dconf:
    key: /org/gnome/desktop/peripherals/touchpad/natural-scroll
    value: "false"

- name: Disabling prompt and start program on media insertion
  community.general.dconf:
    key: /org/gnome/desktop/media-handling/autorun-never
    value: "true"

- name: Configuring top-bar clock
  community.general.dconf:
    key: /org/gnome/desktop/interface/{{ item }}
    value: "true"
  loop:
    - clock-show-seconds
    - clock-show-weekday

- name: Configuring World Clocks
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: /org/gnome/clocks/world-clocks
      value: >-
        [{'location': <(uint32 2, <('Los Angeles', 'KCQT', true,
        [(0.59370283970450188, -2.0644336110828618)], [(0.59432360095955872,
        -2.063741622941031)])>)>}, {'location': <(uint32 2, <('New York',
        'KNYC', true, [(0.71180344078725644, -1.2909618758762367)],
        [(0.71059804659265924, -1.2916478949920254)])>)>}, {'location':
        <(uint32 2, <('Coordinated Universal Time (UTC)', '@UTC', false,
        @a(dd) [], @a(dd) [])>)>}, {'location': <(uint32 2, <('Rome', 'LIRU',
        true, [(0.73216562121162132, 0.21816615649929119)],
        [(0.73129295658562399, 0.21787526247286132)])>)>}, {'location':
        <(uint32 2, <('London', 'EGWU', false, [(0.89971722940307675,
        -0.007272211034407213)], [(0.89971722940307675,
        -0.007272211034407213)])>)>}]
    - key: /org/gnome/shell/world-clocks/locations
      value: >-
        [<(uint32 2, <('Los Angeles', 'KCQT', true, [(0.59370283970450188,
        -2.0644336110828618)], [(0.59432360095955872, -2.063741622941031)])>)>,
        <(uint32 2, <('New York', 'KNYC', true, [(0.71180344078725644,
        -1.2909618758762367)], [(0.71059804659265924,
        -1.2916478949920254)])>)>, <(uint32 2, <('Coordinated Universal Time
        (UTC)', '@UTC', false, @a(dd) [], @a(dd) [])>)>, <(uint32 2, <('Rome',
        'LIRU', true, [(0.73216562121162132, 0.21816615649929119)],
        [(0.73129295658562399, 0.21787526247286132)])>)>, <(uint32 2,
        <('London', 'EGWU', false, [(0.89971722940307675,
        -0.007272211034407213)], [(0.89971722940307675,
        -0.007272211034407213)])>)>]

- name: Enabling GNOME Shell extensions
  when: ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: /org/gnome/shell/disable-user-extensions
    value: "false"

- name: Enabling individual GNOME Shell extensions
  when: ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: /org/gnome/shell/enabled-extensions
    value: "[{{ gnome_extensions[ansible_os_family] | join(', ') }}]"

- name: Configuring GNOME Shell dash-to-dock extension
  when: ansible_os_family == 'Archlinux' or ansible_os_family == 'Debian'
  community.general.dconf:
    key: /org/gnome/shell/extensions/dash-to-dock/{{ item.key }}
    value: "{{ item.value }}"
  loop:
    - key: dock-position
      value: "'LEFT'"
    - key: extend-height
      value: "true"
    - key: custom-theme-shrink
      value: "true"

- name: Configuring GNOME Shell systemd manager extension
  when: ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: /org/gnome/shell/extensions/systemd-manager/{{ item.key }}
    value: "{{ item.value }}"
  loop:
    - key: show-add
      value: "false"
    - key: command-method
      value: "'systemctl'"

- name: Configuring GNOME Shell systemd manager extension systemd services
  when:
    - ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: /org/gnome/shell/extensions/systemd-manager/systemd
    value: >-
      ['{"name":"Docker","service":"docker.service","type":"system"}',
      '{"name":"libvirtd","service":"libvirtd.service","type":"system"}']

- name: Configuring dock applications (at work)
  when: ansible_os_family == 'Archlinux' and mtype == 'work'
  community.general.dconf:
    key: /org/gnome/shell/favorite-apps
    value: "[{{ gnome_work_dock | join(', ') }}]"

- name: Configuring dock applications (at home)
  when: ansible_os_family == 'Archlinux' and mtype == 'personal'
  community.general.dconf:
    key: /org/gnome/shell/favorite-apps
    value: "[{{ gnome_personal_dock | join(', ') }}]"

- name: Configuring GNOME Shell Arc Menu extension
  when: ansible_os_family == 'Archlinux' || ansible_os_family == 'Debian'
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: /org/gnome/shell/extensions/arcmenu/menu-layout
      value: "'Default'"
    - key: /org/gnome/shell/extensions/arcmenu/show-external-devices
      value: "false"
    - key: /org/gnome/shell/extensions/arcmenu/pinned-app-list
      value: "@as []"
    - key: /org/gnome/shell/extensions/arcmenu/default-menu-view
      value: "'Frequent_Apps'"
    - key: /org/gnome/shell/extensions/arcmenu/searchbar-default-bottom-location
      value: "'Top'"
    - key: /org/gnome/shell/extensions/arcmenu/distro-icon
      value: "6" # archlinux

- name: Enabling location services # required for night light
  when: ansible_os_family == 'Archlinux' || ansible_os_family == 'Debian'
  community.general.dconf:
    key: /org/gnome/system/location/enabled
    value: "true"

- name: Configuring GNOME Night Light
  when: ansible_os_family == 'Archlinux' || ansible_os_family == 'Debian'
  community.general.dconf:
    key: "/org/gnome/settings-daemon/plugins/color/{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: night-light-enabled
      value: "true"
    - key: night-light-schedule-automatic
      value: "true"

# https://github.com/blueman-project/blueman/issues/2411
- name: Setting blueman applet to use symbolic status icons
  when: ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: /org/blueman/general/symbolic-status-icons
    value: "true"

- name: Configuring GNOME Interface fonts
  when: ansible_os_family == 'Archlinux' || ansible_os_family == 'Debian'
  community.general.dconf:
    key: "/org/gnome/settings-daemon/plugins/color/{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: /org/gnome/desktop/interface/font-name
      value: "'Ubuntu 11'"
    - key: /org/gnome/desktop/wm/preferences/titlebar-font
      value: "'Ubuntu Bold 11'"
    - key: /org/gnome/desktop/interface/document-font-name
      value: "'Ubuntu 11'"

- name: Setting GNOME Overview shortcut to "Right Super"
  when: ansible_os_family == 'Archlinux' || ansible_os_family == 'Debian'
  community.general.dconf:
    key: /org/gnome/mutter/overlay-key
    value: "'Super_R'"

- name: Configuring blur-my-shell-extension
  when: ansible_os_family == 'Archlinux' || ansible_os_family == 'Debian'
  community.general.dconf:
    # disables the corners on the dash-to-dock
    key: /org/gnome/shell/extensions/blur-my-shell/dash-to-dock/pipeline
    value: "'pipeline_default'"

# ID taken from observing `dconf watch /` but I don't think that it matters
- name: Configuring GNOME random wallpaper local source
  when: ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: "/org/gnome/shell/extensions/space-iflow-randomwallpaper/\
        sources/general/1717579799622/name"
      value: "'Local'"
    - key: "/org/gnome/shell/extensions/space-iflow-randomwallpaper/\
        sources/localFolder/1717579799622/folder"
      value: "'{{ ansible_user_dir }}/.local/share/backgrounds'"
    - key: /org/gnome/shell/extensions/space-iflow-randomwallpaper/sources
      value: "['1717579799622']"
    - key: "/org/gnome/shell/extensions/space-iflow-randomwallpaper/\
        fetch-on-startup"
      value: "true"

- name: Configuring OpenWeather Refined extension
  when: ansible_os_family == 'Archlinux'
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - key: /org/gnome/shell/extensions/openweatherrefined/simplify-degrees
      value: "true"
    - key: /org/gnome/shell/extensions/openweatherrefined/weather-provider
      value: "'openweathermap'"
    - key: /org/gnome/shell/extensions/openweatherrefined/custom-keys
      value: "['{{ gnome_openweathermap_api_key[mtype] }}', '', '']"
    - key: /org/gnome/shell/extensions/openweatherrefined/my-loc-prov
      value: "'ipinfoio'"
    - key: /org/gnome/shell/extensions/openweatherrefined/locs
      value: "[(uint32 1, '', uint32 1, '')]"
